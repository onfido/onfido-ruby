=begin
#Onfido API v3.6

#The Onfido API (v3.6)

The version of the OpenAPI document: v3.6

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Onfido
  class DocumentCDQReasons
    # When data points are obscured to the point that we cannot confirm if the fonts match the expected ones.
    attr_accessor :obscured_data_points

    # When a critical security feature is obscured. This can also refer to when the holder's wet signature, necessary for the document to be valid, is not present.
    attr_accessor :obscured_security_features

    # One of 3 reasons (1) OCR Assisted Scans (i.e. when you're able to move the mouse and highlight part of text), (2) Severely Washed out Background, (3) Overlapping Text.
    attr_accessor :abnormal_document_features

    # Any digital text or electronic watermarks on the document.
    attr_accessor :watermarks_digital_text_overlay

    # If the corner has been physically cut off. This can be found on some documents that are no longer valid.
    attr_accessor :corner_removed

    # A punched hole is present.
    attr_accessor :punctured_document

    # When the back of a document is needed for processing, but is not available.
    attr_accessor :missing_back

    # When a document has been published digitally, there aren't enough security features to review so we cannot perform a full fraud assessment.
    attr_accessor :digital_document

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'obscured_data_points' => :'obscured_data_points',
        :'obscured_security_features' => :'obscured_security_features',
        :'abnormal_document_features' => :'abnormal_document_features',
        :'watermarks_digital_text_overlay' => :'watermarks_digital_text_overlay',
        :'corner_removed' => :'corner_removed',
        :'punctured_document' => :'punctured_document',
        :'missing_back' => :'missing_back',
        :'digital_document' => :'digital_document'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'obscured_data_points' => :'String',
        :'obscured_security_features' => :'String',
        :'abnormal_document_features' => :'String',
        :'watermarks_digital_text_overlay' => :'String',
        :'corner_removed' => :'String',
        :'punctured_document' => :'String',
        :'missing_back' => :'String',
        :'digital_document' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Onfido::DocumentCDQReasons` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Onfido::DocumentCDQReasons`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'obscured_data_points')
        self.obscured_data_points = attributes[:'obscured_data_points']
      end

      if attributes.key?(:'obscured_security_features')
        self.obscured_security_features = attributes[:'obscured_security_features']
      end

      if attributes.key?(:'abnormal_document_features')
        self.abnormal_document_features = attributes[:'abnormal_document_features']
      end

      if attributes.key?(:'watermarks_digital_text_overlay')
        self.watermarks_digital_text_overlay = attributes[:'watermarks_digital_text_overlay']
      end

      if attributes.key?(:'corner_removed')
        self.corner_removed = attributes[:'corner_removed']
      end

      if attributes.key?(:'punctured_document')
        self.punctured_document = attributes[:'punctured_document']
      end

      if attributes.key?(:'missing_back')
        self.missing_back = attributes[:'missing_back']
      end

      if attributes.key?(:'digital_document')
        self.digital_document = attributes[:'digital_document']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          obscured_data_points == o.obscured_data_points &&
          obscured_security_features == o.obscured_security_features &&
          abnormal_document_features == o.abnormal_document_features &&
          watermarks_digital_text_overlay == o.watermarks_digital_text_overlay &&
          corner_removed == o.corner_removed &&
          punctured_document == o.punctured_document &&
          missing_back == o.missing_back &&
          digital_document == o.digital_document
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [obscured_data_points, obscured_security_features, abnormal_document_features, watermarks_digital_text_overlay, corner_removed, punctured_document, missing_back, digital_document].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Onfido.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
