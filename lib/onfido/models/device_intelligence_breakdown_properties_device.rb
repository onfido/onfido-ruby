=begin
#Onfido API v3.6

#The Onfido API (v3.6)

The version of the OpenAPI document: v3.6

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module Onfido
  class DeviceIntelligenceBreakdownPropertiesDevice
    # The SDK version that was used.
    attr_accessor :sdk_version

    # The SDK used to upload the media.
    attr_accessor :sdk_source

    # The token used to authenticate the request.
    attr_accessor :authentication_type

    # The model as set by the phone manufacturer (for Android and iOS) or the browser manufacturer (for Web). The model can be presented in name or number form depending on each manufacturer implementation.
    attr_accessor :raw_model

    # The operating system of the device. The value came from manufacturer implementation (for Android and iOS) or browser's user agent (for Web).
    attr_accessor :os

    # The browser name reported by the browser's user agent.
    attr_accessor :browser

    # Whether the device is an emulator.
    attr_accessor :emulator

    # Whether the device is providing false randomized device and network information.
    attr_accessor :randomized_device

    # Whether device is using stolen security tokens to send the network information.
    attr_accessor :fake_network_request

    # Whether there is highly suspicious traffic related to the IP address. The risk depends on the overall ratio of clear checks on a given IP.
    attr_accessor :ip_reputation

    # The number of times the device was used to create a report for a new applicant. A value greater than 1 indicates potential device reuse.
    attr_accessor :device_fingerprint_reuse

    # Whether the document or biometric media were uploaded from a single device.
    attr_accessor :single_device_used

    # Whether the document media were live captured from the device camera.
    attr_accessor :document_capture

    # Whether the biometric media were live captured from the device camera.
    attr_accessor :biometric_capture

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sdk_version' => :'sdk_version',
        :'sdk_source' => :'sdk_source',
        :'authentication_type' => :'authentication_type',
        :'raw_model' => :'raw_model',
        :'os' => :'os',
        :'browser' => :'browser',
        :'emulator' => :'emulator',
        :'randomized_device' => :'randomized_device',
        :'fake_network_request' => :'fake_network_request',
        :'ip_reputation' => :'ip_reputation',
        :'device_fingerprint_reuse' => :'device_fingerprint_reuse',
        :'single_device_used' => :'single_device_used',
        :'document_capture' => :'document_capture',
        :'biometric_capture' => :'biometric_capture'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sdk_version' => :'String',
        :'sdk_source' => :'String',
        :'authentication_type' => :'String',
        :'raw_model' => :'String',
        :'os' => :'String',
        :'browser' => :'String',
        :'emulator' => :'Boolean',
        :'randomized_device' => :'Boolean',
        :'fake_network_request' => :'Boolean',
        :'ip_reputation' => :'String',
        :'device_fingerprint_reuse' => :'Float',
        :'single_device_used' => :'Boolean',
        :'document_capture' => :'String',
        :'biometric_capture' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'single_device_used',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Onfido::DeviceIntelligenceBreakdownPropertiesDevice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Onfido::DeviceIntelligenceBreakdownPropertiesDevice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sdk_version')
        self.sdk_version = attributes[:'sdk_version']
      end

      if attributes.key?(:'sdk_source')
        self.sdk_source = attributes[:'sdk_source']
      end

      if attributes.key?(:'authentication_type')
        self.authentication_type = attributes[:'authentication_type']
      end

      if attributes.key?(:'raw_model')
        self.raw_model = attributes[:'raw_model']
      end

      if attributes.key?(:'os')
        self.os = attributes[:'os']
      end

      if attributes.key?(:'browser')
        self.browser = attributes[:'browser']
      end

      if attributes.key?(:'emulator')
        self.emulator = attributes[:'emulator']
      end

      if attributes.key?(:'randomized_device')
        self.randomized_device = attributes[:'randomized_device']
      end

      if attributes.key?(:'fake_network_request')
        self.fake_network_request = attributes[:'fake_network_request']
      end

      if attributes.key?(:'ip_reputation')
        self.ip_reputation = attributes[:'ip_reputation']
      end

      if attributes.key?(:'device_fingerprint_reuse')
        self.device_fingerprint_reuse = attributes[:'device_fingerprint_reuse']
      end

      if attributes.key?(:'single_device_used')
        self.single_device_used = attributes[:'single_device_used']
      end

      if attributes.key?(:'document_capture')
        self.document_capture = attributes[:'document_capture']
      end

      if attributes.key?(:'biometric_capture')
        self.biometric_capture = attributes[:'biometric_capture']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      sdk_source_validator = EnumAttributeValidator.new('String', ["onfido-android-sdk", "onfido-ios-sdk", "onfido-web-sdk", "unknown_default_open_api"])
      return false unless sdk_source_validator.valid?(@sdk_source)
      authentication_type_validator = EnumAttributeValidator.new('String', ["sdk_token", "mobile_token", "api_token", "unknown_default_open_api"])
      return false unless authentication_type_validator.valid?(@authentication_type)
      ip_reputation_validator = EnumAttributeValidator.new('String', ["NOT_ENOUGH_DATA", "HIGH_RISK", "LOW_RISK", "unknown_default_open_api"])
      return false unless ip_reputation_validator.valid?(@ip_reputation)
      document_capture_validator = EnumAttributeValidator.new('String', ["live", "unknown_method", "unknown_default_open_api"])
      return false unless document_capture_validator.valid?(@document_capture)
      biometric_capture_validator = EnumAttributeValidator.new('String', ["live", "unknown_method", "unknown_default_open_api"])
      return false unless biometric_capture_validator.valid?(@biometric_capture)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sdk_source Object to be assigned
    def sdk_source=(sdk_source)
      validator = EnumAttributeValidator.new('String', ["onfido-android-sdk", "onfido-ios-sdk", "onfido-web-sdk", "unknown_default_open_api"])
      unless validator.valid?(sdk_source)
        fail ArgumentError, "invalid value for \"sdk_source\", must be one of #{validator.allowable_values}."
      end
      @sdk_source = sdk_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_type Object to be assigned
    def authentication_type=(authentication_type)
      validator = EnumAttributeValidator.new('String', ["sdk_token", "mobile_token", "api_token", "unknown_default_open_api"])
      unless validator.valid?(authentication_type)
        fail ArgumentError, "invalid value for \"authentication_type\", must be one of #{validator.allowable_values}."
      end
      @authentication_type = authentication_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_reputation Object to be assigned
    def ip_reputation=(ip_reputation)
      validator = EnumAttributeValidator.new('String', ["NOT_ENOUGH_DATA", "HIGH_RISK", "LOW_RISK", "unknown_default_open_api"])
      unless validator.valid?(ip_reputation)
        fail ArgumentError, "invalid value for \"ip_reputation\", must be one of #{validator.allowable_values}."
      end
      @ip_reputation = ip_reputation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_capture Object to be assigned
    def document_capture=(document_capture)
      validator = EnumAttributeValidator.new('String', ["live", "unknown_method", "unknown_default_open_api"])
      unless validator.valid?(document_capture)
        fail ArgumentError, "invalid value for \"document_capture\", must be one of #{validator.allowable_values}."
      end
      @document_capture = document_capture
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] biometric_capture Object to be assigned
    def biometric_capture=(biometric_capture)
      validator = EnumAttributeValidator.new('String', ["live", "unknown_method", "unknown_default_open_api"])
      unless validator.valid?(biometric_capture)
        fail ArgumentError, "invalid value for \"biometric_capture\", must be one of #{validator.allowable_values}."
      end
      @biometric_capture = biometric_capture
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sdk_version == o.sdk_version &&
          sdk_source == o.sdk_source &&
          authentication_type == o.authentication_type &&
          raw_model == o.raw_model &&
          os == o.os &&
          browser == o.browser &&
          emulator == o.emulator &&
          randomized_device == o.randomized_device &&
          fake_network_request == o.fake_network_request &&
          ip_reputation == o.ip_reputation &&
          device_fingerprint_reuse == o.device_fingerprint_reuse &&
          single_device_used == o.single_device_used &&
          document_capture == o.document_capture &&
          biometric_capture == o.biometric_capture
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sdk_version, sdk_source, authentication_type, raw_model, os, browser, emulator, randomized_device, fake_network_request, ip_reputation, device_fingerprint_reuse, single_device_used, document_capture, biometric_capture].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Onfido.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
